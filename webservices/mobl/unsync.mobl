module webservices::mobl::unsync
  import webservices :: mobl :: model
  import webservices :: mobl :: sync
  import mobl :: ui :: generic
  function nrUnsyncedIssue ( ) : Num {
    return getUnsyncedIssue ( ) . count ( );
  }
  function nrUnsyncedPerson ( ) : Num {
    return getUnsyncedPerson ( ) . count ( );
  }
  function nrUnsyncedPlace ( ) : Num {
    return getUnsyncedPlace ( ) . count ( );
  }
  function nrUnsyncedProject ( ) : Num {
    return getUnsyncedProject ( ) . count ( );
  }
  function nrUnsyncedTestValidation ( ) : Num {
    return getUnsyncedTestValidation ( ) . count ( );
  }
  function getUnsyncedIssue ( ) : Collection < Issue > {
    return Issue . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedPerson ( ) : Collection < Person > {
    return Person . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedPlace ( ) : Collection < Place > {
    return Place . all ( ) . filter ( "version" , "=" , 0 );
  }
  function getUnsyncedProject ( ) : Collection < Project > {
    return Project . all ( ) . filter ( "version" , "=" , 0 ) . filter ( "sync" , "=" , true );
  }
  function getUnsyncedTestValidation ( ) : Collection < TestValidation > {
    return TestValidation . all ( ) . filter ( "version" , "=" , 0 ) . filter ( "sync" , "=" , true );
  }
  function syncUnsyncedIssue ( ) {
    var begin = now ( ) ;
    Sync . syncIssue ( getUnsyncedIssue ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Issue: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedPerson ( ) {
    var begin = now ( ) ;
    Sync . syncPerson ( getUnsyncedPerson ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Person: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedPlace ( ) {
    var begin = now ( ) ;
    Sync . syncPlace ( getUnsyncedPlace ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Place: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedProject ( ) {
    var begin = now ( ) ;
    Sync . syncProject ( getUnsyncedProject ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced Project: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  function syncUnsyncedTestValidation ( ) {
    var begin = now ( ) ;
    Sync . syncTestValidation ( getUnsyncedTestValidation ( ) . selectJSON ( [ "id" , "version" ] ) );
    log("time needed for syncing unsynced TestValidation: "+( ( now ( ) - begin ) / 1000 ) . toString ( ));
  }
  control statusUnsyncedEntities ( ) {
    group {
      < h3 >
        "Unsynced"
      </ h3 >
      < p >
        label ( "Issue: " + nrUnsyncedIssue ( ) )
      </ p >
      < p >
        label ( "Person: " + nrUnsyncedPerson ( ) )
      </ p >
      < p >
        label ( "Place: " + nrUnsyncedPlace ( ) )
      </ p >
      < p >
        label ( "Project: " + nrUnsyncedProject ( ) )
      </ p >
      < p >
        label ( "TestValidation: " + nrUnsyncedTestValidation ( ) )
      </ p >
    }
  }